package main

import (
	"encoding/json"
	"github.com/pkg/errors"
	"github.com/samber/lo"
	"os"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	templ "{{ .TmplPkg }}"
	"github.com/ghoulhyk/go-generator-net/request"
	"github.com/ghoulhyk/go-generator-net/request/arg"
	"github.com/ghoulhyk/go-generator-net/types"
	"github.com/ghoulhyk/go-generator-net/util/sliceutil"
	_const "github.com/ghoulhyk/go-generator-net/types/const"
)

var serviceList = []request.Interface{
    {{ range $name := .ServNames }}
	    templ.{{ $name }}{},
    {{ end }}
}

var pkgPathReg, _ = regexp.Compile("(([^[\\] ,\"']+/)+([^[\\] ,\"']+))\\.")
var pkgPathWithoutLastReg, _ = regexp.Compile("([^[\\] ,\"']+/)+")

func main() {
	var result []types.Service

	for _, serv := range serviceList {
		servReflectType := reflect.TypeOf(serv)
		decodedServ := types.Service{
			StructName:  servReflectType.Name(),
			TmplPkgPath: servReflectType.PkgPath(),
		}

		baseUrl := strings.TrimSpace(serv.BaseUrl())
		baseUrlFunc := serv.BaseUrlFunc()
		if baseUrl != "" {
			decodedServ.GetBaseUrlMode = 1
			decodedServ.BaseUrl = baseUrl
		} else if baseUrlFunc != nil {
			decodedServ.GetBaseUrlMode = 2
		} else {
			fail(errors.New("BaseUrl和BaseUrlFunc不能同时为空"))
		}
		for _, req := range serv.Reqs() {
			decodedReq := types.Req{
				Name:       req.Name,
				Path:       req.Path,
				Method:     req.Method,
				ReturnType: decodeType(req.ReturnType),
			}

			decodedReq.HeaderArgs = decodeArgs(req.HeaderArgs)
			decodedReq.QueryArgs = decodeArgs(req.QueryArgs)
			decodedReq.PathArgs = decodeArgs(req.PathArgs)
			decodedReq.BodyArgs = decodeArgs(req.BodyArgs)

			decodedServ.Reqs = append(decodedServ.Reqs, decodedReq)
		}

		result = append(result, decodedServ)
	}
	jsonBytes, _ := json.Marshal(result)
	os.Stdout.Write(jsonBytes)
}

func decodeType(val any) types.RType {
	reflectType := reflect.TypeOf(val)
	ident := reflectType.String()
	var pkgPathList []string
	// 判断是否为数组或切片类型
	if reflectType.Kind() == reflect.Array || reflectType.Kind() == reflect.Slice {
		// 处理数组或切片类型的逻辑
		pkgPathList = []string{reflectType.Elem().PkgPath()}
	} else {
		pkgPathList = []string{reflectType.PkgPath()}
	}
	subPkgPathList := lo.Map(pkgPathReg.FindAllStringSubmatch(ident, -1), func(item []string, index int) string {
		return item[1]
	})
	if len(subPkgPathList) > 0 {
		pkgPathList = sliceutil.Concat(pkgPathList, subPkgPathList)
		ident = pkgPathWithoutLastReg.ReplaceAllString(ident, "")
	}
	pkgPathList = lo.Uniq(pkgPathList)

	return types.RType{
		Ident:       ident,
		PkgPathList: pkgPathList,
	}
}

func decodeArgs(args []arg.Arg) []types.Arg {
	if len(args) == 0 {
		return []types.Arg{}
	}

	return lo.FlatMap(args, func(item arg.Arg, _ int) []types.Arg {
		switch item.(type) {
		case arg.StaticArg:
			{
				argVal := item.(arg.StaticArg)
				return []types.Arg{
					types.StaticArg{
						ReqName: argVal.GetReqName(),
						Value:   argVal.Value,
					},
				}
			}
		case arg.DynamicArg:
			{
				argVal := item.(arg.DynamicArg)

				var appendArgs []types.Arg
				decodeArg := types.DynamicArg{
					ReqName:  argVal.GetReqName(),
					ParaName: argVal.ParaName,
					Type:     argVal.Type,
				}
				if argVal.Type == _const.TypeCustom {
					decodeArg.CustomType = lo.ToPtr(decodeType(argVal.CustomType))
				}
				if argVal.Type == _const.TypePart {
					decodeArg.CustomType = lo.ToPtr(decodeType(argVal.CustomType))
					argReflectType := reflect.TypeOf(argVal.CustomType)
					if argVal.IsPtr() {
						// part类型不能是指针
						fail(errors.Errorf("参数[%s]解析错误，part类型不能是指针", argVal.ParaName))
					}
					if argReflectType.Kind() != reflect.Struct {
						// part类型必须为结构体
						fail(errors.Errorf("参数[%s]解析错误，part类型必须为结构体", argVal.ParaName))
					}
					for i := 0; i < argReflectType.NumField(); i++ {
						field := argReflectType.Field(i)
						reqName := field.Tag.Get("reqPart")
						if reqName == "-" {
							continue
						}
						if reqName == "" {
							reqName = field.Name
						}
						appendArgs = append(appendArgs, types.StaticArg{
							ReqName:       reqName,
							Value:         fmt.Sprintf("%s.%s", item.GetReqName(), field.Name),
							ForceNotQuote: true,
						})
					}
				}
				if argVal.IsPtr() {
					decodeArg.PtrType = true
				}
				return append([]types.Arg{decodeArg}, appendArgs...)
			}
		default:
			panic("参数[%s]解析错误，不支持的参数类型")
		}
	})
}

func fail(err error) {
	os.Stderr.WriteString(err.Error() + "\n")
	os.Exit(1)
}
